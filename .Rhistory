return(a)
})
output$activityType <- renderChart2({
selC <- input$suspCat
x <-  suspcatTypeYear()
y <- input$year
x <- x[x$YEAR == y, ]
data <- x[x$SUSPICIOUS_ACTIVITY_CATEGORY %in% selC,]
d1 <- dPlot(
SUSPICIOUS_ACTIVITY_TYPE ~ NUMBER_OF_FILINGS,
groups = "SUSPICIOUS_ACTIVITY_CATEGORY",
data = data,
type = "bar"
)
d1$xAxis(size = 8, type = "addMeasureAxis", outputFormat="#,")
d1$yAxis(size = 8, type = "addCategoryAxis", orderRule = "SUSPICIOUS_ACTIVITY_TYPE")
d1$legend(
x = 0,
y = 5,
width = 800,
height = 20,
horizontalAlign = "right"
)
return(d1)
})
###MONTH TOTALS BY YEAR
output$activityMonth <- renderChart2({
x <- monthYear
y <- input$year
x <- x[x$YEAR == y, ]
a <- hPlot(NUMBER_OF_FILINGS ~ MONTH, data = x, type = "column")
a$title(text = "Number of Filings by Month")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityMonth")
return(a)
})
###STATE TOTALS BY YEAR
output$activityState <- renderChart2({
sel <- input$states
x <- stateYear
y <- input$year
x <- x[x$YEAR == y, ]
data <- x[x$STATE %in% sel,]
a <- hPlot(NUMBER_OF_FILINGS ~ STATE, data = data, type = "column")
a$title(text = "Number of Filings by State")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(height = 300, dom = "activityState")
return(a)
})
###GAMING TOTALS BY YEAR
output$activityGaming <- renderChart2({
x <- gamingYear
y <- input$ADDyear
x <- x[x$YEAR == y, ]
a <- hPlot(x = "TYPE_OF_GAMING_ESTABLISHMENT", y = "NUMBER_OF_FILINGS", data = x, type = "pie")
a$title(text = "Number of Filings by Gaming Establishment")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityGaming")
return(a)
})
###PAYMENT TOTALS BY YEAR
output$activityPayment <- renderChart2({
x <- paymentYear
y <- input$ADDyear
x <- x[x$YEAR == y, ]
a <- hPlot(x = "PAYMENT_INSTRUMENT_TYPE", y = "NUMBER_OF_FILINGS", data = x, type = "pie")
a$title(text = "Number of Filings by Payment Type")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityPayment")
return(a)
})
##### DATA TABLES #####
output$suspCatType <- renderDataTable(suspcatTypebyYear, options = list(pageLength = 10))
output$month <- renderDataTable(monthYear, options = list(pageLength = 10))
output$state <- renderDataTable(stateYear, options = list(pageLength = 10))
output$gaming <- renderDataTable(gamingYear, options = list(pageLength = 10))
output$payment <- renderDataTable(paymentYear, options = list(pageLength = 10))
})
library(shiny)
library(shinydashboard)
library(rCharts)
library(rjson)
#library(plyr)
#library(dplyr)
#library(stringr)
shinyServer(function(input, output) {
suspcatYear <- reactive({
df <- suspcatbyYear %>%
filter(YEAR == input$year)
})
suspcatTypeYear <- reactive({
df <- suspcatTypebyYear %>%
filter(YEAR == input$year)
})
ADD_suspcatYear <- reactive({
df <- suspcatbyYear %>%
filter(YEAR == input$ADDyear)
})
###SUSPICIOUS ACTIVITY CATEGORY TOTALS BY YEAR
output$activityCat <- renderChart2({
x <-  suspcatYear()
a <- hPlot(x = "SUSPICIOUS_ACTIVITY_CATEGORY", y = "NUMBER_OF_FILINGS", data = x, type = "pie")
a$title(text = "Number of Filings by Suspicious Activity Category")
a$plotOptions(width=600, height=400)
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityCat")
return(a)
})
output$activityType <- renderChart2({
selC <- input$suspCat
x <-  suspcatTypeYear()
y <- input$year
x <- x[x$YEAR == y, ]
data <- x[x$SUSPICIOUS_ACTIVITY_CATEGORY %in% selC,]
d1 <- dPlot(
SUSPICIOUS_ACTIVITY_TYPE ~ NUMBER_OF_FILINGS,
groups = "SUSPICIOUS_ACTIVITY_CATEGORY",
data = data,
type = "bar"
)
d1$xAxis(size = 8, type = "addMeasureAxis", outputFormat="#,")
d1$yAxis(size = 8, type = "addCategoryAxis", orderRule = "SUSPICIOUS_ACTIVITY_TYPE")
d1$legend(
x = 0,
y = 5,
width = 800,
height = 20,
horizontalAlign = "right"
)
return(d1)
})
###MONTH TOTALS BY YEAR
output$activityMonth <- renderChart2({
x <- monthYear
y <- input$year
x <- x[x$YEAR == y, ]
a <- hPlot(NUMBER_OF_FILINGS ~ MONTH, data = x, type = "column")
a$title(text = "Number of Filings by Month")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityMonth")
return(a)
})
###STATE TOTALS BY YEAR
output$activityState <- renderChart2({
sel <- input$states
x <- stateYear
y <- input$year
x <- x[x$YEAR == y, ]
data <- x[x$STATE %in% sel,]
a <- hPlot(NUMBER_OF_FILINGS ~ STATE, data = data, type = "column")
a$title(text = "Number of Filings by State")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(height = 300, dom = "activityState")
return(a)
})
###GAMING TOTALS BY YEAR
output$activityGaming <- renderChart2({
x <- gamingYear
y <- input$ADDyear
x <- x[x$YEAR == y, ]
a <- hPlot(x = "TYPE_OF_GAMING_ESTABLISHMENT", y = "NUMBER_OF_FILINGS", data = x, type = "pie")
a$title(text = "Number of Filings by Gaming Establishment")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityGaming")
return(a)
})
###PAYMENT TOTALS BY YEAR
output$activityPayment <- renderChart2({
x <- paymentYear
y <- input$ADDyear
x <- x[x$YEAR == y, ]
a <- hPlot(x = "PAYMENT_INSTRUMENT_TYPE", y = "NUMBER_OF_FILINGS", data = x, type = "pie")
a$title(text = "Number of Filings by Payment Type")
a$tooltip(shared = TRUE)
a$exporting(enabled = T)
a$addParams(dom = "activityPayment")
return(a)
})
##### DATA TABLES #####
output$suspCatType <- renderDataTable(suspcatTypebyYear, options = list(pageLength = 10))
output$month <- renderDataTable(monthYear, options = list(pageLength = 10))
output$state <- renderDataTable(stateYear, options = list(pageLength = 10))
output$gaming <- renderDataTable(gamingYear, options = list(pageLength = 10))
output$payment <- renderDataTable(paymentYear, options = list(pageLength = 10))
})
library(shiny)
library(shinydashboard)
library(rCharts)
header <- dashboardHeader(title = "FINCEN SARC")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets",
badgeLabel = "Coming Soon", badgeColor = "red"),
menuItem("Charts", icon = icon("bar-chart"), tabName = "charts"),
menuItem("Data", icon = icon("table"), tabName = "data")
)
)
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(
title = "Filings by Suspicious Activity Category", width = 8, solidHeader = TRUE, status = "primary",
collapsible = TRUE,
showOutput("activityCat", "highcharts")
),
box(
title = "Casino/Card Club SARs by Year", width = 4, background = "light-blue",
collapsible = TRUE,
selectizeInput("year", "Select Year:", choices = suspcatbyYear$YEAR, selected = max(suspcatbyYear$YEAR), multiple = TRUE, options = list(maxItems = 1))
)
),
fluidRow(
box(
title = "Filings by Suspicious Activity Type", width = 4, background = "purple",
collapsible = TRUE,
checkboxGroupInput('suspCat', 'Check Categories to display:', choices = unique(suspcatTypebyYear$SUSPICIOUS_ACTIVITY_CATEGORY), selected = unique(suspcatTypebyYear$SUSPICIOUS_ACTIVITY_CATEGORY)[3:6]
)
),
box(
title = "Filings by Type", width = 8, solidHeader = TRUE, status = "warning",
collapsible = TRUE,
showOutput("activityType", "dimple")
)
),
fluidRow(
box(
title = "Filings by Month", width = 6, solidHeader = TRUE, status = "success",
collapsible = TRUE,
showOutput("activityMonth", "highcharts")),
box(
title = "Filings by State", width = 6, solidHeader = TRUE, status = "info",
collapsible = TRUE,
selectizeInput("states", "Select States:", choices = stateYear$STATE, multiple = TRUE, selected = unique(stateYear$STATE)[25:30]),
showOutput("activityState", "highcharts")
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content - MORE TO COME")
#             fluidRow(
#
#               box(
#                 title = "Suspicious Activity Category Breakdown", width = 4, background = "light-blue",
#                 collapsible = TRUE,
#                 selectizeInput("year", "Select Year:", choices = suspcatbyYear$YEAR, selected = max(suspcatbyYear$YEAR), multiple = TRUE, options = list(maxItems = 1))
#               ),
#
#               box(
#                 title = "Suspicious Activity Type", width = 8, solidHeader = TRUE, status = "primary",
#                 collapsible = TRUE,
#                 showOutput("activityType", "highcharts"))
#
#
#             )
),
# Third tab content
tabItem(tabName = "charts",
h2("Yealy filings by gaming establishment & payment type."),
fluidRow(
box(
title = "Casino/Card Club SARs by Year", width = 4,
collapsible = TRUE,
selectizeInput("ADDyear", "Select Year:", choices = suspcatbyYear$YEAR, selected = max(suspcatbyYear$YEAR), multiple = TRUE, options = list(maxItems = 1))
)
),
fluidRow(
box(
title = "Filings by Gaming Establishment", solidHeader = TRUE, status = "warning",
collapsible = TRUE,
showOutput("activityGaming", "highcharts")
),
box(
title = "Filings by Payment Type", solidHeader = TRUE, status = "danger",
collapsible = TRUE,
showOutput("activityPayment", "highcharts")
)
)
),
# Fourth tab content
tabItem(tabName = "data",
h2("Data Tables"),
fluidRow(
box(
title = "Suspicious Activity Category & Type", width = 8, status = "info",
collapsible = TRUE,
dataTableOutput("suspCatType")),
box(
title = "Filings by Month", width = 4, status = "primary",
collapsible = TRUE,
dataTableOutput("month")
)
),
fluidRow(
box(
title = "Filings by State", width = 6, status = "info",
collapsible = TRUE,
dataTableOutput("state")),
box(
title = "Filings by Gaming Establishment", width = 6, status = "primary",
collapsible = TRUE,
dataTableOutput("gaming")
)
),
fluidRow(
box(
title = "Filings by Payment Type", status = "info",
collapsible = TRUE,
dataTableOutput("payment"))
#               box(
#                 title = "Filings by Gaming Establishment", width = 6, status = "primary",
#                 collapsible = TRUE,
#                 dataTableOutput("gaming")
#               )
)
)
)
)
dashboardPage(header, sidebar, body, skin = "black")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#get data used by dimple for all of its examples as a first test
data <- read.delim(
"http://pmsi-alignalytics.github.io/dimple/data/example_data.tsv"
)
#eliminate . to avoid confusion in javascript
colnames(data) <- gsub("[.]","",colnames(data))
#example 40 Line
d1 <- dPlot(
UnitSales ~ Month,
data = subset(data, Owner %in% c("Aperture","Black Mesa")),
type = "line"
)
d1$xAxis(type = "addCategoryAxis", orderRule = "Date")
d1$yAxis(type = "addMeasureAxis")
d1
#test out additional layer/series functionality
d1$layer(
x = "date",
y = "psavert",
data = NULL,
type = "line"
)
d1
#example 5 vertical stack grouped bar
d1 <- dPlot(
x = c("PriceTier","Channel"),
y = "UnitSales",
groups = "Owner",
data = data,
type = "bar"
)
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
example 8 horizontal stacked bar
d1 <- dPlot(
Month ~ UnitSales,
groups = "Channel",
data = data,
type = "bar"
)
d1$xAxis(type = "addMeasureAxis")
#good test of orderRule on y instead of x
d1$yAxis(type = "addCategoryAxis", orderRule = "Date")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
#example 10 horizontal stacked bar
d1 <- dPlot(
x = "UnitSales",
y = c("PriceTier","Channel"),
groups = "Channel",
data = data,
type = "bar"
)
d1$xAxis(type = "addMeasureAxis")
#good test of orderRule on y instead of x
d1$yAxis(type = "addCategoryAxis")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
xample 13 vertical marimekko
d1 <- dPlot(
UnitSales ~ Channel,
groups = "Owner",
data = data,
type = "bar"
)
d1$xAxis(type = "addAxis", measure = "UnitSales", showPercent = TRUE)
d1$yAxis(type = "addPctAxis")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
#test with storyboard
d1$set(storyboard = "Date")
d1
#example 8 horizontal stacked bar
d1 <- dPlot(
Month ~ UnitSales,
groups = "Channel",
data = data,
type = "bar"
)
d1$xAxis(type = "addMeasureAxis")
#good test of orderRule on y instead of x
d1$yAxis(type = "addCategoryAxis", orderRule = "Date")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
shiny::runApp()
#example 11 horizontal stacked grouped bar
d1 <- dPlot(
x = "UnitSales",
y = c("PriceTier","Channel"),
groups = "Owner",
data = data,
type = "bar"
)
d1$xAxis(type = "addMeasureAxis")
#good test of orderRule on y instead of x
d1$yAxis(type = "addCategoryAxis")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
shiny::runApp()
View(suspcatTypebyYear)
View(suspcatbyYear)
View(suspcatTypebyYear)
#example 8 horizontal stacked bar
d1 <- dPlot(
Month ~ UnitSales,
groups = "Channel",
data = data,
type = "bar"
)
d1$xAxis(type = "addMeasureAxis")
#good test of orderRule on y instead of x
d1$yAxis(type = "addCategoryAxis", orderRule = "Date")
d1$legend(
x = 200,
y = 10,
width = 400,
height = 20,
horizontalAlign = "right"
)
d1
shiny::runApp()
shiny::runApp()
hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = 'column', group = 'Sex', group.na = 'NA\'s')
## Example 10
a <- hPlot(freq ~ Exer, data = plyr::count(MASS::survey, c('Sex', 'Exer')), type = 'bar', group = 'Sex', group.na = 'NA\'s')
a$plotOptions(bar = list(cursor = 'pointer', point = list(events = list(click = "#! function() { alert ('Category: '+ this.category +', value: '+ this.y); } !#"))))
a
shiny::runApp()
shiny::runApp()
data = plyr::count(MASS::survey, c('Sex', 'Exer'))
View(data)
View(suspcatTypebyYear)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
